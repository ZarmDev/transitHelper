To get real time data based on the route ID
async function getRealTimeData(line, targetStopID) {
    let source = null;
    if (["A", "C", "E"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-ace"
    } else if (["B", "D", "F", "M"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-bdfm"
    } else if (["G"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-g"
    } else if (["J", "Z"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-jz"
    } else if (["N", "Q", "R", "W"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-nqrw"
    } else if (["L"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-l"
    } else if (["1", "2", "3", "4", "5", "6", "7"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs"
    } else if (["SIR"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-si"
    }
    const feed = await parseAndReturnFeed(source)
    // console.log(feed);
    // what are entities? idk :/
    const entities = feed["entity"]
    var obj = {}
    for (var i = 0; i < entities.length; i++) {
        // trip data for each train? not sure
        const tripUpdate = entities[i]["tripUpdate"]
        if (tripUpdate == null || tripUpdate == undefined) {
            continue;
        }
        const trip = tripUpdate["trip"]
        const tripID = trip["tripId"]
        const routeID = trip["routeId"]
        // not sure if this works for all lines... maybe not working for SIR
        if (routeID != line) {
            continue;
        }
        // all the arrivals for each stop in stops.txt (google_transit folder)
        const stopTimeUpdate = tripUpdate["stopTimeUpdate"]
        for (let j = 0; j < stopTimeUpdate.length; j++) {
            let stopID = stopTimeUpdate[j]["stopId"]
            // the stopID looks like "R20N" and it can either be
            // R20, R20S, R20N representing the direction the arrival times are bound
            if (stopID === targetStopID) {
                let time = stopTimeUpdate[j]["arrival"]["time"]
                let timeDifference = unixTimestampToDateTime(time) - Date.now()
                timeDifference = Math.round(timeDifference / (1000 * 60))
                const data = await fs.readFile("./google_transit/stops.txt", 'utf-8')
                const splitByLine = data.split('\n');
                for (var x = 0; x < splitByLine.length; x++) {
                    if (splitByLine[x] == '') {
                        continue;
                    }
                    const splitByComma = splitByLine[x].split(',')
                    // console.log(splitByComma[0], targetStopID)
                    if (splitByComma[0].includes(targetStopID)) {
                        let realStopName = splitByComma[1]
                        obj[i] = `${line} arrives in ${timeDifference} minutes at ${realStopName}`
                    }
                }
            }
        }
    }
    return obj
}

Real time data based on the station name (may choose wrong station because there are duplicate names)

async function getRealTimeData(line, targetStop, direction) {
    let source = null;
    if (["A", "C", "E"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-ace"
    } else if (["B", "D", "F", "M"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-bdfm"
    } else if (["G"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-g"
    } else if (["J", "Z"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-jz"
    } else if (["N", "Q", "R", "W"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-nqrw"
    } else if (["L"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-l"
    } else if (["1", "2", "3", "4", "5", "6", "7"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs"
    } else if (["SIR"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-si"
    }

    const feed = await parseAndReturnFeed(source)
    // console.log(feed);
    // what are entities? idk :/
    const entities = feed["entity"]
    var obj = {}
    const data = await fs.readFile("./google_transit/stops.txt", 'utf-8')
    const splitByLine = data.split('\n');
    var stopID = null;
    // skip to 1 because it's a example
    for (var x = 1; x < splitByLine.length; x++) {
        if (splitByLine[x] == '') {
            continue;
        }
        const splitByComma = splitByLine[x].split(',')
        // console.log(splitByComma[0], targetStopID)
        if (splitByComma[1].includes(targetStop)) {
            stopID = splitByComma[0]
            // console.log(stopID, ' !')
            break;
        }
    }
    for (var i = 0; i < entities.length; i++) {
        // trip data for each train? not sure
        const tripUpdate = entities[i]["tripUpdate"]
        if (tripUpdate == null || tripUpdate == undefined) {
            continue;
        }
        const trip = tripUpdate["trip"]
        const tripID = trip["tripId"]
        const routeID = trip["routeId"]
        // not sure if this works for all lines... maybe not working for SIR
        if (routeID != line) {
            continue;
        }
        // all the arrivals for each stop in stops.txt (google_transit folder)
        const stopTimeUpdate = tripUpdate["stopTimeUpdate"]
        for (let j = 0; j < stopTimeUpdate.length; j++) {
            let stopIDInData = stopTimeUpdate[j]["stopId"]
            // the stopID looks like "R20N" and it can either be
            // R20, R20S, R20N representing the direction the arrival times are bound
            console.log(stopID + direction, stopIDInData)
            if ((stopID + direction) === stopIDInData) {
                // console.log(stopTimeUpdate[j])
                let arrivalObj = stopTimeUpdate[j]["arrival"]
                if (arrivalObj == null) {
                    // I'm not sure if that means it departed already
                    // It seems like it gives data even at the last stop going to nowhere
                    // so maybe just return an empty string?
                    return 'Error'
                    // let departureObj = stopTimeUpdate[j]["departure"]
                    // let departureTime = departureObj["time"]
                    // let timeDifference = unixTimestampToDateTime(departureTime) - Date.now()
                    // timeDifference = Math.round(timeDifference / (1000 * 60))
                    // obj[i] = `${line} departed ${timeDifference} minutes ago at ${targetStop}`
                    continue
                }
                let arrivalTime = arrivalObj["time"]
                let timeDifference = unixTimestampToDateTime(arrivalTime) - Date.now()
                timeDifference = Math.round(timeDifference / (1000 * 60))
                obj[i] = `${line} arrives in ${timeDifference} minutes at ${targetStop}`
            }
        }
    }
    if (Object.keys(obj).length === 0) {
        console.log('EMPTY OBJECT')
        // return feed
    }
    return obj
}

Real time data based on the Longitude and Latiude of station (incomplete)
async function getArrivals(line: string, targetCoords: [number, number], direction: string, data: string) {
    let source = "";
    if (["A", "C", "E"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-ace"
    } else if (["B", "D", "F", "M"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-bdfm"
    } else if (["G"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-g"
    } else if (["J", "Z"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-jz"
    } else if (["N", "Q", "R", "W"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-nqrw"
    } else if (["L"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-l"
    } else if (["1", "2", "3", "4", "5", "6", "7"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs"
    } else if (["SIR"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-si"
    }

    const feed = await parseAndReturnFeed(source)
    // console.log(feed);
    // what are entities? idk :/
    const entities = feed["entity"]
    var obj = {}
    // const data = await fs.readFile("./google_transit/stops.txt", 'utf-8')
    const splitByLine = data.split('\n');
    var coords = null;
    for (var x = 0; x < splitByLine.length; x++) {
        if (splitByLine[x] == '') {
            continue;
        }
        const splitByComma = splitByLine[x].split(',')
        console.log(splitByComma[2], targetStopID)
        if (splitByComma[2].includes(targetCoords[0]) && splitByComma[3].includes(targetCoords[1])) {
            stopID = splitByComma[0]
            // console.log(stopID, ' !')
            break;
        }
    }
    for (var i = 0; i < entities.length; i++) {
        // trip data for each train? not sure
        const tripUpdate = entities[i]["tripUpdate"]
        if (tripUpdate == null || tripUpdate == undefined) {
            continue;
        }
        const trip = tripUpdate["trip"]
        const tripID = trip["tripId"]
        const routeID = trip["routeId"]
        // not sure if this works for all lines... maybe not working for SIR
        if (routeID != line) {
            continue;
        }
        // all the arrivals for each stop in stops.txt (google_transit folder)
        const stopTimeUpdate = tripUpdate["stopTimeUpdate"]
        for (let j = 0; j < stopTimeUpdate.length; j++) {
            let stopIDInData = stopTimeUpdate[j]["stopId"]
            // the stopID looks like "R20N" and it can either be
            // R20, R20S, R20N representing the direction the arrival times are bound
            console.log(stopID + direction, stopIDInData)
            if ((stopID + direction) === stopIDInData) {
                // console.log(stopTimeUpdate[j])
                let arrivalObj = stopTimeUpdate[j]["arrival"]
                if (arrivalObj == null) {
                    // I'm not sure if that means it departed already
                    // It seems like it gives data even at the last stop going to nowhere
                    // so maybe just return an empty string?
                    return 'Error'
                    // let departureObj = stopTimeUpdate[j]["departure"]
                    // let departureTime = departureObj["time"]
                    // let timeDifference = unixTimestampToDateTime(departureTime) - Date.now()
                    // timeDifference = Math.round(timeDifference / (1000 * 60))
                    // obj[i] = `${line} departed ${timeDifference} minutes ago at ${targetStop}`
                    continue
                }
                let arrivalTime = arrivalObj["time"]
                let timeDifference = unixTimestampToDateTime(arrivalTime) - Date.now()
                timeDifference = Math.round(timeDifference / (1000 * 60))
                obj[i] = `${line} arrives in ${timeDifference} minutes at ${targetStop}`
            }
        }
    }
    if (Object.keys(obj).length === 0) {
        console.log('EMPTY OBJECT')
        // return feed
    }
    return obj
}