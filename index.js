import GtfsRealTimeBindings from 'gtfs-realtime-bindings'
import express from 'express';
// import cors from 'cors';
import fs from 'fs';

function saveToFile(content) {
    fs.writeFile('save.txt', content, (err) => {
        if (err) {
            console.error('Error writing to file:', err);
        } else {
            console.log('Content saved to save.txt');
        }
    });
}

async function parseAndReturnFeed(url) {
    const response = await fetch(url, {
        method: 'GET',
        headers: {
            // ...
        },
    });
    if (!response.ok) {
        const error = new Error(`${response.url}: ${response.status} ${response.statusText}`);
        throw error;
    }
    const buffer = await response.arrayBuffer();
    // Convert ArrayBuffer to Uint8Array
    const uint8Array = new Uint8Array(buffer);
    const feed = GtfsRealTimeBindings.transit_realtime.FeedMessage.decode(uint8Array);
    return feed
}

const app = express();
const PORT = 8082;

const trainAlerts = {}

async function getServiceAlerts() {
    const feed = await parseAndReturnFeed("https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/camsys%2Fsubway-alerts")
    // Where all the data is. The other key is header, used for metadata
    const processed = feed["entity"]
    saveToFile(JSON.stringify(processed, null, 2))
    for (var i = 0; i < processed.length; i++) {
        // console.log(processed[i])
        const id = processed[i]["id"]
        // make sure the id is a current alert and not planned alert
        // console.log(id, !id.includes('lmm:alert'))
        if (!id.includes('lmm:alert')) {
            // console.log(id);
            break
        } else {
            // console.log(id, true);
        }
        if (processed[i]["alert"] != undefined) {
            const alert = processed[i]["alert"]
            const routesAffected = alert["informedEntity"]
            const header = alert["headerText"]
            console.log(header);
            const description = alert["descriptionText"]
            const headerTextTranslation = header["translation"]
            const descriptionTranslation = description == null ? null : description["translation"]
            // you can either use index 0 or 1 which either gives you the normal version or version in HTML
            const headerText = headerTextTranslation[1]["text"]
            const descriptionText = description == null ? null : descriptionTranslation[1]["text"]
            // console.log(routesAffected.length)
            const routeId = routesAffected[0]['routeId']
            trainAlerts[routeId] = `${headerText} \n${descriptionText}`
            // for (var i = 0; i < routesAffected.length; i++) {
            //     const routeId = routesAffected[i]['routeId']
            //     trainAlerts[routeId] = `${headerText} \n${descriptionText}`
            // }
        }
        if (i > 100) {
            console.log('damn')
            break;
        }
    }
    return trainAlerts
}

// generated by AI cuz im lazy
function unixTimestampToDateTime(unixTimestamp) {
    const milliseconds = unixTimestamp * 1000; // Convert seconds to milliseconds
    const date = new Date(milliseconds);
    return date
}


async function getRealTimeData(line, targetStopID) {
    let source = null;
    if (["A", "C", "E"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-ace"
    } else if (["B", "D", "F", "M"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-bdfm"
    } else if (["G"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-g"
    } else if (["J", "Z"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-jz"
    } else if (["N", "Q", "R", "W"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-nqrw"
    } else if (["L"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-l"
    } else if (["1", "2", "3", "4", "5", "6", "7"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs"
    } else if (["SIR"].includes(line)) {
        source = "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-si"
    }
    const feed = await parseAndReturnFeed(source)
    // console.log(feed);
    // what are entities? idk :/
    const entities = feed["entity"]
    var obj = {}
    for (var i = 0; i < entities.length; i++) {
        // trip data for each train? not sure
        const tripUpdate = entities[i]["tripUpdate"]
        if (tripUpdate == null || tripUpdate == undefined) {
            continue;
        }
        const trip = tripUpdate["trip"]
        const tripID = trip["tripId"]
        const routeID = trip["routeId"]
        // not sure if this works for all lines... maybe not working for SIR
        if (routeID != line) {
            continue;
        }
        // all the arrivals for each stop in stops.txt (google_transit folder)
        const stopTimeUpdate = tripUpdate["stopTimeUpdate"]
        for (let j = 0; j < stopTimeUpdate.length; j++) {
            let stopID = stopTimeUpdate[j]["stopId"]
            // the stopID looks like "R20N" and it can either be
            // R20, R20S, R20N representing the direction the arrival times are bound
            if (stopID === targetStopID) {
                let time = stopTimeUpdate[j]["arrival"]["time"]
                let timeDifference = unixTimestampToDateTime(time) - Date.now()
                timeDifference /= (1000 * 60)
                obj[i] = `${line} arrives in ${timeDifference} minutes in stop ${'TODO: read stops.txt and put the corresponding stop here.'}`
            }
        }
    }
    return obj
}

app.get('/serviceAlerts', async (req, res) => {
    try {
        const alerts = await getServiceAlerts();
        res.json(alerts); // Send the alerts as JSON
    } catch (error) {
        res.status(500).send(error.message);
    }
});


app.get('/realtimeTrainData', async (req, res) => {
    try {
        // to test
        const currentStopID = 'R20N'
        const line = 'N'
        const realtime = await getRealTimeData(line, currentStopID);
        res.json(realtime); // Send the alerts as JSON
    } catch (error) {
        res.status(500).send(error.message);
    }
});

app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});